diff --git a/.vscode/settings.json b/.vscode/settings.json
index f1d7ff1..36cf82f 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -7,6 +7,10 @@
         "prefetch.h": "c",
         "common.h": "c",
         "processor.h": "c",
-        "timer.h": "c"
+        "timer.h": "c",
+        "syscall.h": "c",
+        "stat.h": "c",
+        "dirent.h": "c",
+        "typeinfo": "c"
     }
 }
\ No newline at end of file
diff --git a/usr/src/ln.c b/usr/src/ln.c
index fdf07de..eaf3081 100644
--- a/usr/src/ln.c
+++ b/usr/src/ln.c
@@ -1,9 +1,48 @@
 #include <fcntl.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <syscall.h>
 #include <unistd.h>
 
 int main(int argc, char *argv[]) {
-    return 0;
+
+    // Vérifie que le nombre d'arguments passés en paramètre est correct (fichier cible et nom du lien)
+    if (argc != 3) {
+        printf("Usage: %s <target> <symbolic_link>\n", argv[0]);
+        return EXIT_FAILURE;
+    }
+
+    // Ouvre le fichier cible en lecture seule et récupère son file descriptor
+    int target_fd = open(argv[1], O_RDONLY);
+    
+    // En cas d'erreur lors de l'ouverture, affiche un message d'erreur
+    if (target_fd == -1) {
+        printf("Target file not found or unable to open !\n");
+        return EXIT_FAILURE;
+    }
+
+    /* 
+     * Crée un lien symbolique entre le fichier cible et le lien symbolique.
+     * En cas d'erreur lors de la création, affiche un message d'erreur.
+     */ 
+    if (sys_symlink(target_fd, argv[2]) == -1) {
+        printf("Unable to establish link with target file !\n");
+
+        // Si la fermeture du file descriptor échoue, affiche un message d'erreur
+        if (close(target_fd) == -1) {
+            printf("Unable to close file descriptor of target file !\n");
+        }
+        return EXIT_FAILURE;
+    }
+
+    /* 
+     * Ferme le file descriptor du fichier cible.
+     * En cas d'erreur lors de la fermeture, affiche un message d'erreur
+     */
+    if (close(target_fd) == -1) {
+        printf("Unable to close file descriptor of target file !\n");
+        return EXIT_FAILURE;
+    }
+
+    return EXIT_SUCCESS;
 }
+
diff --git a/usr/src/ls.c b/usr/src/ls.c
index 6e5be19..333bf46 100644
--- a/usr/src/ls.c
+++ b/usr/src/ls.c
@@ -30,25 +30,45 @@
 #include <sys/stat.h>
 #include <syscall.h>
 
+#define BYTES_PER_KILO 1024
+
 /* Convert a size in bytes to a human readable format
  * Only one number after the comma will be displayed
  */
 void human_readable_size(const unsigned long int size, char *buf)
 {
 	char *prefix[] = {"", "K", "M", "G", "T"};
-	size_t prefix_idx = 0, final_size = 0;
-
-	//TO COMPLETE
+	size_t prefix_idx = 0;
+	double final_size = (double) size;
+
+	// TO COMPLETE
+
+	/* 
+	 * On divise la taille passée en bytes jusqu'à ce qu'elle soit plus petite que 1024, 
+	 * ainsi cela signifie que l'on a atteint la taille à représenter.
+	 * A chaque division, on incrémente aussi l'indicateur qui représente l'unitée à utiliser.
+	 */
+	while (final_size >= BYTES_PER_KILO)
+	{
+		final_size /= BYTES_PER_KILO;
+		prefix_idx++;
+	}
 
 	sprintf(buf, "%g%s", final_size, prefix[prefix_idx]);
 }
 
 /*
-* Converts given mode to -rwx formatted string
-*/
- void attr_to_str(mode_t mod, char *buf)
+ * Converts given mode to -rwx formatted string
+ */
+void attr_to_str(mode_t mod, char *buf)
 {
-	//TO COMPLETE
+	// TO COMPLETE
+	if (mod & AM_RD)
+		buf[1] = 'r';
+	if (mod & AM_WR)
+		buf[2] = 'w';
+	if (mod & AM_EX)
+		buf[3] = 'x';
 }
 
 void print_info_file(const char *file, int is_dir, int extended)
@@ -56,16 +76,85 @@ void print_info_file(const char *file, int is_dir, int extended)
 	int err;
 	char date[80];
 	char size[80];
-	char modes[5];
+	char modes[5] = "----";
 	struct stat f_stat;
-	time_t time;
-	struct tm tm;
+	struct tm* tm;
 
-	if (!extended) {
+	if (!extended)
+	{
 		printf("%s%s\n", file, is_dir ? "/" : "");
+	}
+	else
+	{
+		// TO COMPLETE
+
+		// Récolte des informations sur le fichier donné
+		err = stat(file, &f_stat);
+		if (err < 0)
+		{
+			printf("Function stat() error ! Check errno !\n");
+			return;
+		}
+
+
+		/* Attributs spéciaux */
+
+		// Vérifie si le fichier est un répertoire ou lien symbolique
+		if (is_dir) {
+
+			modes[0] = 'd';
+		} else if (f_stat.st_mode & AM_SYM) {
+
+			modes[0] = 'l';
+
+			// On va utiliser un file descriptor pour aller chercher le nom du fichier pointé
+			int fd = open(file, O_PATH | O_NOFOLLOW);
+
+			if (fd < 0) {
+
+				printf("Unable to open this symbolic link !\n");
+				return;
+			}
+
+			char linkTarget[FILENAME_SIZE];
+
+			// Lecture du nom du fichier pointé
+			int n = read(fd, linkTarget, FILENAME_SIZE - 1);
+			if (n < 0) {
+
+				printf("Unable to read symbolic link !\n");
+				if (close(fd) < 0)
+
+					printf("File descriptor closure failed !\n");
+				return;
+			}
+			linkTarget[n] = 0;
+
+			// Création de la chaîne 
+			strcat((char*) file, " -> ");
+			strcat((char*) file, linkTarget);
+
+			if (close(fd) < 0) {
+
+				printf("Unable to close the file descriptor !\n");
+				return;
+			}
+		}
+
+
+		/* Taille du fichier */
+		human_readable_size(f_stat.st_size, size);
+
+		/* Privilèges */
+		attr_to_str(f_stat.st_mode, modes);
+
+		/* Date */
+		tm = localtime((const time_t *) &f_stat.st_mtim);
+		sprintf(date, "%d-%d-%d %d:%d", tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min);
 
-	} else {
-		//TO COMPLETE
+
+		// Résultat final
+		printf("%s | %s | %s | %s%s\n", modes, date, size, file, is_dir ? "/" : "");
 	}
 }
 
@@ -82,35 +171,72 @@ int main(int argc, char **argv)
 	int extended = 0;
 	const char *usage = "Usage: ls [-l] [DIR]\n";
 
-	if (argc == 1) {
+	if (argc == 1)
+	{
 		dir = ".";
-	} else if ((argc > 1) && (argc < 4)) {
+	}
+	else if ((argc > 1) && (argc < 4))
+	{
 
-		if (!strcmp(argv[1], "-l")) {
+		if (!strcmp(argv[1], "-l"))
+		{
 			extended = 1;
-			if (argc != 2) {
+			if (argc != 2)
+			{
 				dir = argv[2];
-			} else {
+			}
+			else
+			{
 				dir = ".";
 			}
-
-		} else if ((argc == 3) && !strcmp(argv[2], "-l")) {
+		}
+		else if ((argc == 3) && !strcmp(argv[2], "-l"))
+		{
 			extended = 1;
 			dir = argv[1];
-		} else if (argc == 2) {
+		}
+		else if (argc == 2)
+		{
 			dir = argv[1];
-		} else {
+		}
+		else
+		{
 			printf("%s", usage);
 			exit(1);
 		}
-	} else {
+	}
+	else
+	{
 		printf("%s", usage);
 		exit(1);
 	}
+	printf("%s\n", dir);
+
+	// Print info for every file in given directory
+	// TO COMPLETE. Hint: use opendir and readdir
+
+	// Ouverture du répertoire donné
+	DIR *directory = opendir(dir);
+
+	if (directory == NULL)
+	{
+		printf("Unable to open given directory !\n");
+		return EXIT_FAILURE;
+	}
 
-	//Print info for every file in given directory
-	//TO COMPLETE. Hint: use opendir and readdir
+	struct dirent *entry;
+
+	// Lecture des fichiers présents dans le répertoire
+	while ((entry = readdir(directory)) != NULL)
+	{
+		print_info_file(entry->d_name, entry->d_type == DT_DIR, extended);
+	}
+
+	if (closedir(directory) < 0)
+	{
+		printf("Unable to close current directory !\n");
+		return EXIT_FAILURE;
+	}
 
 	exit(0);
 }
-
