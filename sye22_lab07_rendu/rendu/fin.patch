diff --git a/usr/src/memreplace.c b/usr/src/memreplace.c
index eebb469..ffadaa5 100644
--- a/usr/src/memreplace.c
+++ b/usr/src/memreplace.c
@@ -25,20 +25,91 @@
 /* [0] = Valid on 1 bit */
 uint8_t page_table[NB_PAGES] = {0};
 
+uint8_t TDU [NB_PAGES] = {0};
+uint8_t compteur_global = 0;
+uint8_t TVC = 0;
+
 void replaceLRU(void) {
 
+    // Index de la page à mettre à jour
+    int lowestPage = -1;
+
+    for(int i = 0; i < NB_PAGES; ++i) {
+
+        // On vérifie que la page soit valide et on détermine si l'index doit être mis à jour pour celui de la page usée le moins récemment
+        if((page_table[i] & VALID_BIT_MASK) && (lowestPage == -1 || TDU[lowestPage] > TDU[i]))
+        {
+            lowestPage = i;
+        }
+    }
+
+    // On  met à jour les bits de la page utilisée le moins récemment
+    page_table[lowestPage] &= ~VALID_BIT_MASK;
+    page_table[lowestPage] |= SWAP_BIT_MASK;
 }
 
 void inc_compteur(uint8_t no_page) {
 
+    // Mise à jour du TDU pour la page donnée
+    if(no_page >= 0 && no_page < NB_PAGES) {
+        TDU[no_page] = ++compteur_global;
+    } else {
+        printf("Page invalide !");
+        return;
+    }
 }
 
 void replaceWSC(void) {
 
+    // Index de la page à mettre à jour
+    int lowestPage = -1;
+    
+    for(int i = 0; i < NB_PAGES; ++i) {
+
+        // On ne prend pas en compte les pages non valides
+		if (!(page_table[i] & VALID_BIT_MASK)) {
+			continue;
+        }
+
+        // Permet de définir la première page valide, cela sera utile dans le cas où auucne page n'a été évincée
+        if(lowestPage == -1) {
+            lowestPage = i;
+        }
+
+        // Détermine si la page a déjà eu le droit à sa "seconde chance"
+        if(page_table[i] & REF_BIT_MASK) {
+            page_table[i] &= ~REF_BIT_MASK;
+        } else {
+
+            // On vérifie que la page ne soit pas dans l'ensemble de travail
+            if(TVC - TDU[i] > DELTA) {
+                lowestPage = i;
+                break;
+            }
+        }
+    }
+
+    // Si aucune page valide n'a été trouvée, c'est une erreur
+    if (lowestPage == -1) {
+
+        printf("Aucune page valide trouvee");
+        return;
+    } else {
+
+        page_table[lowestPage] &= ~VALID_BIT_MASK;
+        page_table[lowestPage] |= SWAP_BIT_MASK;
+    }
+    
 }
 
 void updateTDU(void) {
 
+    for(int i = 0; i < NB_PAGES; ++i) {
+        // Mise à jour du TDU des pages
+        if(page_table[i] & REF_BIT_MASK & VALID_BIT_MASK) {
+            TDU[i] = TVC;
+        }
+    }
 }
 
 void init_page_table(void) {
@@ -71,6 +142,7 @@ void print_memory(void) {
 }
 
 int ask_user_page_no() {
+
     char input[4];
 
     printf("Enter the page to be access: ");
@@ -143,13 +215,24 @@ int main(int argc, char *argv[]) {
             if (page_no >= 0 && page_no < NB_PAGES) {
                 if (LRU_run) {
                     /* LRU Related */
-                    if (!(page_table[page_no] & VALID_BIT_MASK)) /* VALID = 0 ? */
+
+                    if (!(page_table[page_no] & VALID_BIT_MASK)) { /* VALID = 0 ? */
                         replaceLRU();
+                        page_table[page_no] &= ~SWAP_BIT_MASK;
+                        page_table[page_no] |= VALID_BIT_MASK;
+                    }
+                    inc_compteur(page_no);
                 }
                 else {
                     /* WSC Related */
-                    if (!(page_table[page_no] & VALID_BIT_MASK)) /* VALID = 0 ? */
+                    if (!(page_table[page_no] & VALID_BIT_MASK)) {/* VALID = 0 ? */
                         replaceWSC();
+                        page_table[page_no] &= ~SWAP_BIT_MASK;
+                    }
+					page_table[page_no] |= REF_BIT_MASK;
+					page_table[page_no] |= VALID_BIT_MASK;
+                    ++TVC;
+                    updateTDU();
                 }
 
                 print_memory();
